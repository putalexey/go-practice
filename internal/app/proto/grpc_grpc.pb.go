// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: internal/app/proto/grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	CreateShort(ctx context.Context, in *CreateShortRequest, opts ...grpc.CallOption) (*CreateShortResponse, error)
	CreateShortBatch(ctx context.Context, in *CreateShortBatchRequest, opts ...grpc.CallOption) (*CreateShortBatchResponse, error)
	GetShortsForCurrentUser(ctx context.Context, in *ListShortsRequest, opts ...grpc.CallOption) (*ListShortsResponse, error)
	DeleteUserShorts(ctx context.Context, in *DeleteShortBatchRequest, opts ...grpc.CallOption) (*DeleteShortBatchResponse, error)
	InternalStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InternalStatsResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) CreateShort(ctx context.Context, in *CreateShortRequest, opts ...grpc.CallOption) (*CreateShortResponse, error) {
	out := new(CreateShortResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/CreateShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) CreateShortBatch(ctx context.Context, in *CreateShortBatchRequest, opts ...grpc.CallOption) (*CreateShortBatchResponse, error) {
	out := new(CreateShortBatchResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/CreateShortBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetShortsForCurrentUser(ctx context.Context, in *ListShortsRequest, opts ...grpc.CallOption) (*ListShortsResponse, error) {
	out := new(ListShortsResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/GetShortsForCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteUserShorts(ctx context.Context, in *DeleteShortBatchRequest, opts ...grpc.CallOption) (*DeleteShortBatchResponse, error) {
	out := new(DeleteShortBatchResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/DeleteUserShorts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) InternalStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InternalStatsResponse, error) {
	out := new(InternalStatsResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/InternalStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	CreateShort(context.Context, *CreateShortRequest) (*CreateShortResponse, error)
	CreateShortBatch(context.Context, *CreateShortBatchRequest) (*CreateShortBatchResponse, error)
	GetShortsForCurrentUser(context.Context, *ListShortsRequest) (*ListShortsResponse, error)
	DeleteUserShorts(context.Context, *DeleteShortBatchRequest) (*DeleteShortBatchResponse, error)
	InternalStats(context.Context, *Empty) (*InternalStatsResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) CreateShort(context.Context, *CreateShortRequest) (*CreateShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShort not implemented")
}
func (UnimplementedShortenerServer) CreateShortBatch(context.Context, *CreateShortBatchRequest) (*CreateShortBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortBatch not implemented")
}
func (UnimplementedShortenerServer) GetShortsForCurrentUser(context.Context, *ListShortsRequest) (*ListShortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortsForCurrentUser not implemented")
}
func (UnimplementedShortenerServer) DeleteUserShorts(context.Context, *DeleteShortBatchRequest) (*DeleteShortBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserShorts not implemented")
}
func (UnimplementedShortenerServer) InternalStats(context.Context, *Empty) (*InternalStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalStats not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_CreateShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).CreateShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/CreateShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).CreateShort(ctx, req.(*CreateShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_CreateShortBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).CreateShortBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/CreateShortBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).CreateShortBatch(ctx, req.(*CreateShortBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetShortsForCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetShortsForCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/GetShortsForCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetShortsForCurrentUser(ctx, req.(*ListShortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteUserShorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteUserShorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/DeleteUserShorts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteUserShorts(ctx, req.(*DeleteShortBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_InternalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).InternalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/InternalStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).InternalStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShort",
			Handler:    _Shortener_CreateShort_Handler,
		},
		{
			MethodName: "CreateShortBatch",
			Handler:    _Shortener_CreateShortBatch_Handler,
		},
		{
			MethodName: "GetShortsForCurrentUser",
			Handler:    _Shortener_GetShortsForCurrentUser_Handler,
		},
		{
			MethodName: "DeleteUserShorts",
			Handler:    _Shortener_DeleteUserShorts_Handler,
		},
		{
			MethodName: "InternalStats",
			Handler:    _Shortener_InternalStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/app/proto/grpc.proto",
}
